from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import asyncio

# Define the request model for code optimization input
class OptimizationRequest(BaseModel):
    description: str  # Natural language description of the optimization goal
    code: str         # Original code to be optimized
    language: str     # Programming language of the code

class Api9:
    def __init__(self, _client, router):
        self.client = _client
        router.add_api_route(
            path="/suggest-optimization", 
            endpoint=self.suggest_optimization, 
            methods=["POST"]
        )

    # Function to suggest code optimizations based on natural language description
    def suggestCodeOptimizationFromNL(self, description: str, code: str, language: str) -> str:
        # Construct prompt for code optimization
        prompt = (
            f"Suggest optimizations for the following {language} code based on this goal: {description}.\n"
            f"Original Code:\n{code}\nOptimized Code:"
        )
        
        # Call OpenAI API to generate the optimized code
        response = self.client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are an AI assistant that suggests code optimizations based on user goals."},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=512,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        # Extract the optimized code from the response
        optimized_code = response.choices[0].message.content.strip()
        if not optimized_code:
            raise ValueError("No optimized code was generated by the model.")
        
        return optimized_code

    # Define API endpoint to suggest code optimizations
    async def suggest_optimization(self, request: OptimizationRequest):
        # Check if any field is empty
        if not request.description.strip():
            raise HTTPException(status_code=400, detail="Description cannot be empty.")
        if not request.code.strip():
            raise HTTPException(status_code=400, detail="Code cannot be empty.")
        if not request.language.strip():
            raise HTTPException(status_code=400, detail="Language cannot be empty.")
        
        try:
            # Run the code optimization suggestion in a separate thread to avoid blocking
            optimized_code = await asyncio.to_thread(self.suggestCodeOptimizationFromNL, request.description, request.code, request.language)
            return {"optimized_code": optimized_code}  # Return optimized code as JSON response
        except ValueError as ve:
            raise HTTPException(status_code=500, detail=str(ve))
        except Exception:
            raise HTTPException(status_code=500, detail="An unexpected error occurred.")
